@page "/admin/products"
@page "/admin"
@inherits OwningComponentBase<IBookStoreRepository>

<table class="table table-sm table-striped table-bordered">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Category</th>
            <th>Price</th>
            <td />
        </tr>
    </thead>
    <tbody>
        @if (ProductData?.Count() > 0)
        {
            @foreach (Book p in ProductData)
            {
        <tr>
            <td>@p.BookId</td>
            <td>@p.Title</td>
            <td>@p.Category</td>
            <td>@p.Price.ToString("c")</td>
            <td>
                <NavLink class="btn btn-info btn-sm"
                         href="@GetDetailsUrl(p.BookId)">
                    Details
                </NavLink>
            </td>
            <td>
                <NavLink class="btn btn-warning btn-sm"
                         href="@GetEditUrl(p.BookId)">
                    Edit
                </NavLink>
            </td>
            <td>
                <button class="btn btn-danger btn-sm" @onclick="@(x => RemoveProject(p))">Delete</button>
            </td>
        </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5" class="text-center">No Products</td>
            </tr>
        }
    </tbody>
</table>
<NavLink class="btn btn-primary" href="/admin/products/create">Create</NavLink>
@code {
    public IBookStoreRepository Repository => Service;
    public IEnumerable<Book> ProductData { get; set; }
    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
    }
    public async Task UpdateData()
    {
        ProductData = await Repository.Books.ToListAsync();
    }

    public async Task RemoveProject(Book b)
    {
        Repository.DeleteProduct(b);
        await UpdateData();
    }

    public string GetDetailsUrl(long id) => $"/admin/products/details/{id}";
    public string GetEditUrl(long id) => $"/admin/products/edit/{id}";
}